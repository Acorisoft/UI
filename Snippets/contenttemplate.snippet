<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>contenttemplate</Title>
      <Author>
      </Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>contenttemplate</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>name</ID>
          <ToolTip>name</ToolTip>
          <Default>name</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>type</ID>
          <ToolTip>type</ToolTip>
          <Default>type</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$"><![CDATA[        public object $name$
        {
            get => (object)GetValue($name$Property);
            set => SetValue($name$Property, value);
        }

        public DataTemplate $name$Template
        {
            get => (DataTemplate)GetValue($name$TemplateProperty);
            set => SetValue($name$TemplateProperty, value);
        }

        public DataTemplateSelector $name$TemplateSelector
        {
            get => (DataTemplateSelector)GetValue($name$TemplateSelectorProperty);
            set => SetValue($name$TemplateSelectorProperty, value);
        }


        public string $name$StringFormat
        {
            get => (string)GetValue($name$StringFormatProperty);
            set => SetValue($name$StringFormatProperty, value);
        }

        public static readonly DependencyProperty $name$StringFormatProperty = DependencyProperty.Register(
            "$name$StringFormat",
            typeof(string),
            typeof($type$), 
            new PropertyMetadata(null));

        public static readonly DependencyProperty $name$TemplateSelectorProperty = DependencyProperty.Register(
            "$name$TemplateSelector",
            typeof(DataTemplateSelector),
            typeof($type$), 
            new PropertyMetadata(null));

        public static readonly DependencyProperty $name$TemplateProperty = DependencyProperty.Register(
            "$name$Template",
            typeof(DataTemplate),
            typeof($type$), 
            new PropertyMetadata(null));

        public static readonly DependencyProperty $name$Property = DependencyProperty.Register(
            "$name$",
            typeof(object),
            typeof($type$), 
            new PropertyMetadata(null));]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>